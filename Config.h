/* Copyright 2015,2016 Tao Xu
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

#pragma once

#include <algorithm>
#include <unordered_map>
#include <string>
#include <vector>

namespace boosting {

enum LossFunction {
  L2Regression = 0,
  L2Logistic   = 1
};

// Specifying the training parameters and data format
struct Config {

  // reads configuration file generated by
  // a.feed.scripts.boosting.gen_json.gen_json_file
  bool readConfig(const std::string& fileName);

  int getNumFeatures() const {
    return trainIdx_.size();
  }

  int getNumTrees() const {
    return numTrees_;
  }

  int getNumLeaves() const {
    return numLeaves_;
  }

  double getLearningRate() const {
    return learningRate_;
  }

  double getExampleSamplingRate() const {
    return exampleSamplingRate_;
  }

  double getFeatureSamplingRate() const {
    return featureSamplingRate_;
  }

  int getTargetIdx() const {
    return targetIdx_;
  }

  int getCompareIdx() const {
    return cmpIdx_;
  }

  const std::vector<int>& getTrainIdx() const {
    return trainIdx_;
  }

  bool isWeakFeature(const int fidx) const {
    return (std::find(weakIdx_.begin(), weakIdx_.end(), trainIdx_[fidx])
            != weakIdx_.end());
  }

  const std::string& getFeatureName(const int fidx) const {
    return allColumns_[trainIdx_[fidx]];
  }

  // Returns -1 if feature is not found.
  int getFeatureIndex(const std::string& f) const {
    auto it = featureToIndexMap_.find(f);
    return it != featureToIndexMap_.end() ? it->second : -1;
  }

  const std::vector<int>& getWeakIdx() const {
    return weakIdx_;
  }

  const std::vector<int>& getEvalIdx() const {
    return evalIdx_;
  }

  const std::vector<std::string>& getColumnNames() const {
    return allColumns_;
  }

  char getDelimiter() const {
    return delimiter_;
  }

  LossFunction getLossFunction() const {
    return lossFunction_;
  }

 private:

  int numTrees_;
  int numLeaves_;
  double exampleSamplingRate_;
  double featureSamplingRate_;
  double learningRate_;

  int targetIdx_;
  int cmpIdx_;
  LossFunction lossFunction_;

  std::vector<int> trainIdx_;
  std::vector<int> weakIdx_;
  std::vector<int> evalIdx_;

  std::vector<std::string> allColumns_;
  std::unordered_map<std::string, int> featureToIndexMap_;
  char delimiter_;
};

}
